#ifndef ERR_TYPE_H
#define ERR_TYPE_H

#include <set>
/**
 * @brief The error types for miniSQL.
 * 
 */
enum db_err_t{
    DB_SUCCESS = 0,
    DB_FAILED,
    DB_TABLE_ALREADY_EXIST,
    DB_TABLE_NOT_EXIST,
    DB_INDEX_ALREADY_EXIST,
    DB_INDEX_NOT_FOUND,
    DB_COLUMN_NAME_NOT_EXIST,
    DB_KEY_NOT_FOUND,
    DB_FILE_NOT_FOUND,
    DB_ALL_PAGES_PINNED,
    DB_TYPE_ERR,
    DB_OPERANDS_MISMATCH,
    DB_TUPLE_TYPE_CONFLICT,
    DB_PRIMARY_KEY_CONFLICT,
    DB_UNIQUE_CONFLICT,
    DB_ATTRIBUTE_NOT_EXIST,
    DB_BPTREE_EMPTY
};

const std::map<db_err_t, std::string> ERR_STR_MAP {
    {DB_FAILED, "DB_FAILED"},
    {DB_TABLE_ALREADY_EXIST, "DB_TABLE_ALREADY_EXIST"},
    {DB_TABLE_NOT_EXIST, "DB_TABLE_NOT_EXIST"},
    {DB_INDEX_ALREADY_EXIST, "DB_INDEX_ALREADY_EXIST"},
    {DB_INDEX_NOT_FOUND, "DB_INDEX_NOT_FOUND"},
    {DB_COLUMN_NAME_NOT_EXIST, "DB_COLUMN_NAME_NOT_EXIST"},
    {DB_KEY_NOT_FOUND, "DB_KEY_NOT_FOUND"},
    {DB_FILE_NOT_FOUND, "DB_FILE_NOT_FOUND"},
    {DB_ALL_PAGES_PINNED, "DB_ALL_PAGES_PINNED"},
    {DB_TYPE_ERR, "DB_TYPE_ERR"},
    {DB_OPERANDS_MISMATCH, "DB_OPERANDS_MISMATCH"},
    {DB_TUPLE_TYPE_CONFLICT, "DB_TUPLE_TYPE_CONFLICT"},
    {DB_PRIMARY_KEY_CONFLICT, "DB_PRIMARY_KEY_CONFLICT"},
    {DB_UNIQUE_CONFLICT, "DB_UNIQUE_CONFLICT"},
    {DB_ATTRIBUTE_NOT_EXIST, "DB_UNIQUE_CONFLICT"},
    {DB_BPTREE_EMPTY, "DB_BPTREE_EMPTY"}
};

#endif